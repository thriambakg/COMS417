/*
 * This file was automatically generated by EvoSuite
 * Tue Feb 20 19:43:04 GMT 2024
 */

package triangle;

import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import triangle.Triangle;
import triangle.TriangleType;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TriangleType_ESTest extends TriangleType_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Triangle triangle0 = TriangleType.triangle(3, 2, 2);
      assertEquals(Triangle.SCALENE, triangle0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Triangle triangle0 = TriangleType.triangle(1168, 1168, 1846);
      assertEquals(Triangle.ISOSCELES, triangle0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Triangle triangle0 = TriangleType.triangle(2, 1004, 2);
      assertEquals(Triangle.INVALID, triangle0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Triangle triangle0 = TriangleType.triangle(4, 2, 2);
      assertEquals(Triangle.INVALID, triangle0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Triangle triangle0 = TriangleType.triangle(1, 1, 2);
      assertEquals(Triangle.INVALID, triangle0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Triangle triangle0 = TriangleType.triangle(3, 342, (-1452));
      assertEquals(Triangle.INVALID, triangle0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Triangle triangle0 = TriangleType.triangle(2045, (-1847), (-1847));
      assertEquals(Triangle.INVALID, triangle0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Triangle triangle0 = TriangleType.triangle(0, 2, (-1452));
      assertEquals(Triangle.INVALID, triangle0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Triangle triangle0 = TriangleType.triangle(1132, 977, 1132);
      assertEquals(Triangle.ISOSCELES, triangle0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Triangle triangle0 = TriangleType.triangle(3, 3, 3);
      assertEquals(Triangle.EQUILATERAL, triangle0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Triangle triangle0 = TriangleType.triangle(632, 632, 1);
      assertEquals(Triangle.ISOSCELES, triangle0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Triangle triangle0 = TriangleType.triangle(2, 3, 1);
      assertEquals(Triangle.INVALID, triangle0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Triangle triangle0 = TriangleType.triangle(882, 1, 1);
      assertEquals(Triangle.INVALID, triangle0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Triangle triangle0 = TriangleType.triangle(1, 882, 2204);
      assertEquals(Triangle.INVALID, triangle0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Triangle triangle0 = TriangleType.triangle(2, 2, 0);
      assertEquals(Triangle.INVALID, triangle0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Triangle triangle0 = TriangleType.triangle(1682, 0, 1084);
      assertEquals(Triangle.INVALID, triangle0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Triangle triangle0 = TriangleType.triangle(4, 1108, 1108);
      assertEquals(Triangle.SCALENE, triangle0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Triangle triangle0 = TriangleType.triangle((-496), 0, (-496));
      assertEquals(Triangle.INVALID, triangle0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TriangleType triangleType0 = new TriangleType();
  }
}
